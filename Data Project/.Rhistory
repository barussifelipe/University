install.packages("dplyr")
install.packages("ggplot2")
setwd("~/Documentos/Uni/2nd Year 2nd Semester/Data Project")
library(dplyr)
library(purrr)
library(tidyr)
library(ggplot2)
library(igraph)
# Data Analysis -----------------------------------------------------------
#My question is: Is it possible that the returns of a commodity that in theory shouldn't
#impact on Microsoft, impact on the price of this company?
#First of all, we have the document all together. We know the first column is the date.
#The second is the stock.
#The next 5 are the ones in theory should be correlated. we call this the Impact group.
#GOLD, SILVER, PLATINUM, COPPER, PALADIUM.
#The others shouldn't be correlated, we will call the No Impact group.
#Brent Crude Oil, Natural Gas, Corn, Oats, Rice, Soybeans, Cocoa, Coffee, Cotton, Sugar.
stock = "MSFT"
returns = returns[complete.cases(returns), ] = returns = read.csv("returns_stocks_commodities.csv")
returns_no_date = returns[complete.cases(returns), ][-1]
returns_long = pivot_longer(returns, cols = -Date, names_to = "Commodity", values_to = "Return") %>%
filter(Commodity != stock) #Drop stock reference
returns_long_ref = returns_long %>% left_join(returns %>% select(Date, all_of(stock)), by = "Date") #Left join it.
#We want to check how is the shape of the data, we will do a scatter plot.
#We need to limit the y axis to the min, max Microsoft, to not get scaled.
min_msft = min(returns_long_ref[[stock]], na.rm = TRUE)
max_msft = max(returns_long_ref[[stock]], na.rm = TRUE)
ggplot(data = returns_long_ref, aes(x = Return, y = !!sym(stock), color = Commodity)) +
geom_point() +
facet_wrap(~ Commodity) +
scale_y_continuous(limits = c(min_msft, max_msft)) +
labs(title = "Microsoft Returns X Commodities Returns", x = "Commodity Returns", y = "Microsoft Returns",
caption = "(based on data from Yahoo Finance)")
#First of all, we want to understand each case, how does the stock behaves in correlation to the others.
correlation_table = data.frame(values = cor(returns_no_date, method = "spearman")[1, -1])
#First the Impact
correlation_table[1:6, ]
#We understand that Microsoft is pratically neutral correlated to gold. To the others it has a weak positive
#correlation.
#Now the No Impact
correlation_table[7: ncol(returns_no_date), ]
#We found that it has some positive and negative correlations in general.
#We now use a bar plot to plot all this correlation table with respect to MSFT.
#We will use ggplot library because it's better to design and control the variables.
labels = rownames(correlation_table)
ggplot(data = correlation_table, aes(x = labels, y = values, fill = values)) +
geom_col() +
scale_fill_gradient2(name = "Gradient",
high = "blue", low = "red", mid = "purple", midpoint = mean(correlation_table$values)) +
labs(title = "Microsoft Correlation Table", x = "Commodities", y = "Values",
caption = "(based on data from Yahoo Finance)")
#Now that we plotted this and we understand the differences between each commodity. They are not significant.
#We will now do a linear regression to understand how does each correlation behave.
#For this we will do a facetwrap in which we do a plot for each commodity.
ggplot(data = returns_long_ref, aes(x = Return, y = !!sym(stock))) +
facet_wrap(~ Commodity) +
geom_point() +
scale_y_continuous(limits = c(min_msft, max_msft)) +
geom_smooth(method = "lm", se = FALSE, col = "blue") +
labs(title = "MSFT Correlation Lines")
#Plotting these lines we understand that we cannot find a linear relationship between these commodities.
#Since, we are able to understand how these are under fitting the data.
#So, what we want is to understand if even in specific moments, this holds.
#We will have two measures of extremity. 2std from the mean and 3std from the mean.
#We can affirm that the first measure we are outside of 95% of the cases. The second 99.7% of the cases.
#However, to be able to affirm this, we need to check the histogram of each commodity, since this holds in
#a normal distribution.
returns_long = returns_long[!is.na(returns_long$Return), ]
#First we will calculate the mean and standard deviation of each commodity.
stats = returns_long %>%
group_by(Commodity) %>%
summarise(mean = mean(Return), sd = sd(Return))
#Then we will calculate a PDF for each commodity.
# Generate x-values covering the range of returns
x_range = seq(min(returns_long$Return), max(returns_long$Return), length.out = 100)
# Calculate normal curve points per commodity
norm_curves = stats %>%
group_by(Commodity) %>%
reframe(
x = x_range,
y = dnorm(x, mean = mean, sd = sd)  # Use group-specific mean/sd
)
# Plotting the histogram and normal distribution for each commodity
ggplot(data = returns_long, aes(x = Return, y = ..density.., fill = Commodity)) +
geom_histogram(bins = 50) +
geom_line(data = norm_curves, aes(x = x, y = y), color = "blue") +
facet_wrap(~ Commodity)
#Observing the graph, we understand that they don't follow normal distributions, even if it's similar.
#Therefore, we need to convert each commodity to a z-score and then get the dates when the values are extremities.
returns_long_z = returns_long %>%
left_join(stats, by = "Commodity") %>%
mutate(z_score = (Return - mean) / sd)
#Since Z-scores means how many standard deviations a value is from the mean, we can now filter the dates.
#We will filter dates that the z-score: |2| <= Z <= |3|, for 2std extremities and Z >= |3| for 3std extremities.
#One concern is that since we are getting the dates where these extremities happened, what occurs is that
#while one commodity is in an extremity, the others are not. This can lead to a bias in the correlation.
#Therefore, we have to calculate the correlation of one commodity at a time.
#We will get first the dates of the extremities of each commodity and then do the correlation.
extremities_by_commodity_2std = returns_long_z %>%
group_by(Commodity) %>%
filter(abs(z_score) >= 2 & abs(z_score) < 3) %>%
summarise(dates = list(unique(Date)))
extremities_by_commodity_3std = returns_long_z %>%
group_by(Commodity) %>%
filter(abs(z_score) >= 3) %>%
summarise(dates = list(unique(Date)))
#Now we will calculate the correlation for each commodity in the extremities.
# 1. Define a function to calculate correlation for a commodity's extreme dates
get_data <- function(comm, extreme_dates, returns_df, stock_col) {
comm_returns <- returns_df %>%
filter(Date %in% extreme_dates) %>%
pull(comm)
stock_returns <- returns_df %>%
filter(Date %in% extreme_dates) %>%
pull(stock_col)
data.frame(x = comm_returns, y = stock_returns)
}
cor_test_2std = extremities_by_commodity_2std %>%
mutate(data = map2(Commodity, dates, ~ get_data(.x, .y, returns, stock))) %>%
unnest(data) %>%
group_by(Commodity) %>%
summarise(cor_test = list(cor.test(x, y, method = "spearman")),
p_value = map_dbl(cor_test, ~ .x$p.value),
)
cor_test_3std = extremities_by_commodity_3std %>%
mutate(data = map2(Commodity, dates, ~ get_data(.x, .y, returns, stock))) %>%
unnest(data) %>%
group_by(Commodity) %>%
summarise(cor_test = list(cor.test(x, y, method = "spearman", conf.level = 0.95, exact = FALSE)),
p_value = map_dbl(cor_test, ~ .x$p.value)
)
#The ones with values greater than 0.05 are not statistically significant.
cor_test_2std <- cor_test_2std %>%
mutate(Correlation = map_dbl(cor_test, ~ .x$estimate)) %>%
select(Commodity, Correlation, p_value)
cor_test_3std <- cor_test_3std %>%
mutate(Correlation = map_dbl(cor_test, ~ .x$estimate)) %>%
select(Commodity, Correlation, p_value)
#Now, we will plot the results.
ggplot(data = cor_test_2std, aes(x = Commodity, y = Correlation, fill = Correlation)) +
geom_col() +
scale_fill_gradient2(name = "Gradient",
high = "blue", low = "red", mid = "purple",
midpoint = mean(cor_test_2std$Correlation)) +
geom_text(aes(label = round(Correlation, 2)), vjust = -0.5, color = "black", size = 3) +
labs(title = "Microsoft Correlation Table Extremities 2std", x = "Commodities", y = "Values",
caption = "(based on data from Yahoo Finance)")
ggplot(data = cor_test_3std, aes(x = Commodity, y = Correlation, fill = Correlation)) +
geom_col() +
scale_fill_gradient2(name = "Gradient",
high = "blue", low = "red", mid = "purple",
midpoint = mean(cor_test_3std$Correlation)) +
geom_text(aes(label = round(Correlation, 2)), vjust = -0.5, color = "black", size = 3) +
labs(title = "Microsoft Correlation Table Extremities 3std", x = "Commodities", y = "Values",
caption = "(based on data from Yahoo Finance)")
#We see that the intensity of correlation is higher in both plots, specially, in the 3std plot.
#We observe that some commodities have one behaviour on the 2std and another on the 3std, as KC.F(Coffe),
#NG.F(Natural Gas), CC.F(Cocoa), CT.F(Cotton), GC.F(Gold), HG.F(Copper), SB.F(Soybeans), ZO.F(Oats).
#Now, we see that Microsoft has a correlation with commodities that shouldn't impact it.
#In the end, we want to see if we can assume this correlation is statistically significant.
#We will do a correlation test for each commodity in the extremities.
# Filter significant commodities
sig_results <- cor_test_2std %>%
filter(p_value < 0.06)  # NG.F included for illustration
#Now, we will plot the same scatterplot with the linear regression line to see if we can find a more linear relation.
#We will use a similar function, to create a dataframe where we have the stock returns and commodity returns, for
#each one of the commodity.
# 2. Apply to all commodities (vectorized)
returns_specific_2std = extremities_by_commodity_2std %>%
mutate(data = map2(Commodity, dates, ~ get_data(.x, .y, returns, stock))) %>%
unnest(data)
head(returns_specific_2std)
returns_specific_3std = extremities_by_commodity_3std %>%
mutate(data = map2(Commodity, dates, ~ get_data(.x, .y, returns, stock))) %>%
unnest(data)
# 3. Create the scatterplot
ggplot(data = returns_specific_2std, aes(x = x, y = y, color = Commodity)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, col = "blue") +
facet_wrap(~ Commodity) +
labs(title = "Microsoft Returns X Commodities Returns Extremities 2std",
x = "Commodity Returns", y = "Microsoft Returns",
caption = "(based on data from Yahoo Finance)")
#We still observe that the linear regression line is not fitting the data well, therefore, is not a linear relationship.
ggplot(data = returns_specific_3std, aes(x = x, y = y, color = Commodity)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, col = "blue") +
facet_wrap(~ Commodity) +
labs(title = "Microsoft Returns X Commodities Returns Extremities 3std",
x = "Commodity Returns", y = "Microsoft Returns",
caption = "(based on data from Yahoo Finance)")
#On this one, there is a better linear relationship, however, it still really poor.
#Conclusion: There isn't a linear relationship between the commodities and MSFT.
#"During extreme events, Sugar (SB.F) shows a weak inverse correlation with MSFT (ρ = -0.19, p = 0.047),
#while Silver (SI.F) and Natural Gas (NG.F) exhibit weak positive links
#(ρ = 0.16, p = 0.049 and ρ = 0.17, p = 0.055, respectively).
#Other commodities show no statistically significant relationships."
# Network Analysis --------------------------------------------------------
#We will now do a network analysis to understand how the industries of each commodity had an
#indirect impact on Microsoft, using the correlations as the weights.
#We will also see the links between the major commodities country producer and the stock.
#We will use the correlation table we created before, to create a network.
#We will use the igraph library to create the network.
correlation_network = cor_test_3std %>%
select(Commodity, Correlation) %>%
mutate(Stock = stock)
#Create a dataset for each commodity, where there are the industries related by each commodity.
#"BZ.F" "CC.F" "CT.F" "GC.F" "HG.F" "KC.F" "NG.F" "PA.F" "PL.F" "SB.F" "SI.F" "ZC.F" "ZO.F" "ZR.F" "ZS.F"
commodity_industries = data.frame(
Commodity = c("BZ.F", "CC.F", "CT.F", "GC.F", "HG.F",
"KC.F", "NG.F", "PA.F", "PL.F", "SB.F",
"SI.F", "ZC.F", "ZO.F", "ZR.F", "ZS.F"),
Industry = c("Transportation, Petrochemicals, Energy",
"Chocolate, Cosmetics, Food", "Textiles, Medical, Apparel",
"Mining, Jewelry, Electronics, Finance", "Mining, Construction, Electronics, EVs",
"Beverages, Food Service", "Electricity, Heating, Manufacturing, Transport",
"Mining, Automotive Catalysts, Electronics", "Mining, Automotive, Jewelry, Chemicals",
"Food, Biofuel, Beverages", "Mining, Solar Panels, Electronics, Jewelry",
"Animal Feed, Biofuel, Food", "Animal Feed, Food Products",
"Food, Beverages, Biofuel", "Animal Feed, Biofuel, Food"))
#Now we will join to this dataset the correlation network dataset.
commodity_industries = commodity_industries %>%
left_join(correlation_network, by = "Commodity")
#Now we will change this dataset in order to have only one industry per row.
commodity_industries_long = commodity_industries %>%
group_by(Commodity) %>%
separate_rows(Industry, sep = ", ") %>%
mutate(Industry = trimws(Industry))  # Remove any leading/trailing whitespace
#Now we will create a network graph using the igraph library.
#Prepare edges
edges = commodity_industries %>%
select(from = Commodity, to = Stock, weights = Correlation)
#Prepare the edges from Commodity to Industry with a symbolic weight in the weights
edges_industry = commodity_industries_long %>%
select(from = Commodity, to = Industry, weights = Correlation)
edges_combined = bind_rows(edges, edges_industry)
#Now we will prepare the vertices
vertices = data.frame(name = unique(c(edges$from, edges$to, edges_industry$to)),
type = c(rep("Commodity", length(unique(edges$from))),
rep("Stock", length(unique(edges$to))),
rep("Industry", length(unique(edges_industry$to)))))
#Create the graph
g = graph_from_data_frame(d = edges_combined, vertices = vertices, directed = FALSE)
#Plot the graph
plot(g,
layout = layout_with_kk(g, kkconst = vcount(g)**31),  # Adjust repulsion for better spacing
vertex.label = V(g)$name,
vertex.label.cex = 0.6,
vertex.label.color = "gray20",  # Darker for readability
vertex.size = 8,
vertex.color = ifelse(V(g)$type == "Commodity", "#2E8B57",
ifelse(V(g)$type == "Stock", "#4169E1", "#B22222")),
edge.width = E(g)$weights * E(g)$weights* 40,  # Less aggressive scaling
edge.color = ifelse(E(g)$weights > 0, "#4682B4", "#FF6347"),
main = "Network of Commodities, Industries and Microsoft Stock",
margin = c(0, 0, 0, 0))  # Maximize plot area
#Plot the graph
plot(g,
layout = layout_with_kk(g, kkconst = vcount(g)**32),  # Adjust repulsion for better spacing
vertex.label = V(g)$name,
vertex.label.cex = 0.6,
vertex.label.color = "gray20",  # Darker for readability
vertex.size = 8,
vertex.color = ifelse(V(g)$type == "Commodity", "#2E8B57",
ifelse(V(g)$type == "Stock", "#4169E1", "#B22222")),
edge.width = E(g)$weights * E(g)$weights* 40,  # Less aggressive scaling
edge.color = ifelse(E(g)$weights > 0, "#4682B4", "#FF6347"),
main = "Network of Commodities, Industries and Microsoft Stock",
margin = c(0, 0, 0, 0))  # Maximize plot area
#Plot the graph
plot(g,
layout = layout_with_kk(g, kkconst = vcount(g)**33),  # Adjust repulsion for better spacing
vertex.label = V(g)$name,
vertex.label.cex = 0.6,
vertex.label.color = "gray20",  # Darker for readability
vertex.size = 8,
vertex.color = ifelse(V(g)$type == "Commodity", "#2E8B57",
ifelse(V(g)$type == "Stock", "#4169E1", "#B22222")),
edge.width = E(g)$weights * E(g)$weights* 40,  # Less aggressive scaling
edge.color = ifelse(E(g)$weights > 0, "#4682B4", "#FF6347"),
main = "Network of Commodities, Industries and Microsoft Stock",
margin = c(0, 0, 0, 0))  # Maximize plot area
#Plot the graph
plot(g,
layout = layout_with_kk(g, kkconst = vcount(g)**33),  # Adjust repulsion for better spacing
vertex.label = V(g)$name,
vertex.label.cex = 0.6,
vertex.label.color = "gray20",  # Darker for readability
vertex.size = 8,
vertex.color = ifelse(V(g)$type == "Commodity", "#2E8B57",
ifelse(V(g)$type == "Stock", "#4169E1", "#B22222")),
edge.width = E(g)$weights * E(g)$weights* 40,  # Less aggressive scaling
edge.color = ifelse(E(g)$weights > 0, "#4682B4", "#FF6347"),
main = "Network of Commodities, Industries and Microsoft Stock",
margin = c(0, 0, 0, 0))  # Maximize plot area
#Plot the graph
plot(g,
layout = layout_with_kk(g, kkconst = vcount(g)**34),  # Adjust repulsion for better spacing
vertex.label = V(g)$name,
vertex.label.cex = 0.6,
vertex.label.color = "gray20",  # Darker for readability
vertex.size = 8,
vertex.color = ifelse(V(g)$type == "Commodity", "#2E8B57",
ifelse(V(g)$type == "Stock", "#4169E1", "#B22222")),
edge.width = E(g)$weights * E(g)$weights* 40,  # Less aggressive scaling
edge.color = ifelse(E(g)$weights > 0, "#4682B4", "#FF6347"),
main = "Network of Commodities, Industries and Microsoft Stock",
margin = c(0, 0, 0, 0))  # Maximize plot area
#Plot the graph
plot(g,
layout = layout_with_kk(g, kkconst = vcount(g)**35),  # Adjust repulsion for better spacing
vertex.label = V(g)$name,
vertex.label.cex = 0.6,
vertex.label.color = "gray20",  # Darker for readability
vertex.size = 8,
vertex.color = ifelse(V(g)$type == "Commodity", "#2E8B57",
ifelse(V(g)$type == "Stock", "#4169E1", "#B22222")),
edge.width = E(g)$weights * E(g)$weights* 40,  # Less aggressive scaling
edge.color = ifelse(E(g)$weights > 0, "#4682B4", "#FF6347"),
main = "Network of Commodities, Industries and Microsoft Stock",
margin = c(0, 0, 0, 0))  # Maximize plot area
#Plot the graph
plot(g,
layout = layout_with_kk(g, kkconst = vcount(g)**35),  # Adjust repulsion for better spacing
vertex.label = V(g)$name,
vertex.label.cex = 0.6,
vertex.label.color = "gray20",  # Darker for readability
vertex.size = 8,
vertex.color = ifelse(V(g)$type == "Commodity", "#2E8B57",
ifelse(V(g)$type == "Stock", "#4169E1", "#B22222")),
edge.width = E(g)$weights * E(g)$weights* 40,  # Less aggressive scaling
edge.color = ifelse(E(g)$weights > 0, "#4682B4", "#FF6347"),
main = "Network of Commodities, Industries and Microsoft Stock",
margin = c(0, 0, 0, 0))  # Maximize plot area
#Plot the graph
plot(g,
layout = layout_with_kk(g, kkconst = vcount(g)**36),  # Adjust repulsion for better spacing
vertex.label = V(g)$name,
vertex.label.cex = 0.6,
vertex.label.color = "gray20",  # Darker for readability
vertex.size = 8,
vertex.color = ifelse(V(g)$type == "Commodity", "#2E8B57",
ifelse(V(g)$type == "Stock", "#4169E1", "#B22222")),
edge.width = E(g)$weights * E(g)$weights* 40,  # Less aggressive scaling
edge.color = ifelse(E(g)$weights > 0, "#4682B4", "#FF6347"),
main = "Network of Commodities, Industries and Microsoft Stock",
margin = c(0, 0, 0, 0))  # Maximize plot area
#Plot the graph
plot(g,
layout = layout_with_kk(g, kkconst = vcount(g)**37),  # Adjust repulsion for better spacing
vertex.label = V(g)$name,
vertex.label.cex = 0.6,
vertex.label.color = "gray20",  # Darker for readability
vertex.size = 8,
vertex.color = ifelse(V(g)$type == "Commodity", "#2E8B57",
ifelse(V(g)$type == "Stock", "#4169E1", "#B22222")),
edge.width = E(g)$weights * E(g)$weights* 40,  # Less aggressive scaling
edge.color = ifelse(E(g)$weights > 0, "#4682B4", "#FF6347"),
main = "Network of Commodities, Industries and Microsoft Stock",
margin = c(0, 0, 0, 0))  # Maximize plot area
#Plot the graph
plot(g,
layout = layout_with_kk(g, kkconst = vcount(g)**38),  # Adjust repulsion for better spacing
vertex.label = V(g)$name,
vertex.label.cex = 0.6,
vertex.label.color = "gray20",  # Darker for readability
vertex.size = 8,
vertex.color = ifelse(V(g)$type == "Commodity", "#2E8B57",
ifelse(V(g)$type == "Stock", "#4169E1", "#B22222")),
edge.width = E(g)$weights * E(g)$weights* 40,  # Less aggressive scaling
edge.color = ifelse(E(g)$weights > 0, "#4682B4", "#FF6347"),
main = "Network of Commodities, Industries and Microsoft Stock",
margin = c(0, 0, 0, 0))  # Maximize plot area
#Plot the graph
plot(g,
layout = layout_with_kk(g, kkconst = vcount(g)**39),  # Adjust repulsion for better spacing
vertex.label = V(g)$name,
vertex.label.cex = 0.6,
vertex.label.color = "gray20",  # Darker for readability
vertex.size = 8,
vertex.color = ifelse(V(g)$type == "Commodity", "#2E8B57",
ifelse(V(g)$type == "Stock", "#4169E1", "#B22222")),
edge.width = E(g)$weights * E(g)$weights* 40,  # Less aggressive scaling
edge.color = ifelse(E(g)$weights > 0, "#4682B4", "#FF6347"),
main = "Network of Commodities, Industries and Microsoft Stock",
margin = c(0, 0, 0, 0))  # Maximize plot area
#Plot the graph
plot(g,
layout = layout_with_kk(g, kkconst = vcount(g)**39),  # Adjust repulsion for better spacing
vertex.label = V(g)$name,
vertex.label.cex = 0.6,
vertex.label.color = "black",  # Darker for readability
vertex.size = 8,
vertex.color = ifelse(V(g)$type == "Commodity", "#2E8B57",
ifelse(V(g)$type == "Stock", "#4169E1", "#B22222")),
edge.width = E(g)$weights * E(g)$weights* 40,  # Less aggressive scaling
edge.color = ifelse(E(g)$weights > 0, "#4682B4", "#FF6347"),
main = "Network of Commodities, Industries and Microsoft Stock",
margin = c(0, 0, 0, 0))  # Maximize plot area
#Plot the graph
plot(g,
layout = layout_with_kk(g, kkconst = vcount(g)**39),  # Adjust repulsion for better spacing
vertex.label = V(g)$name,
vertex.label.cex = 0.6,
vertex.label.color = "black",  # Darker for readability
vertex.size = 5,
vertex.color = ifelse(V(g)$type == "Commodity", "#2E8B57",
ifelse(V(g)$type == "Stock", "#4169E1", "#B22222")),
edge.width = E(g)$weights * E(g)$weights* 40,  # Less aggressive scaling
edge.color = ifelse(E(g)$weights > 0, "#4682B4", "#FF6347"),
main = "Network of Commodities, Industries and Microsoft Stock",
margin = c(0, 0, 0, 0))  # Maximize plot area
#Plot the graph
plot(g,
layout = layout_with_kk(g, kkconst = vcount(g)**39),  # Adjust repulsion for better spacing
vertex.label = V(g)$name,
vertex.label.cex = 0.6,
vertex.label.color = "black",  # Darker for readability
vertex.size = 10,
vertex.color = ifelse(V(g)$type == "Commodity", "#2E8B57",
ifelse(V(g)$type == "Stock", "#4169E1", "#B22222")),
edge.width = E(g)$weights * E(g)$weights* 40,  # Less aggressive scaling
edge.color = ifelse(E(g)$weights > 0, "#4682B4", "#FF6347"),
main = "Network of Commodities, Industries and Microsoft Stock",
margin = c(0, 0, 0, 0))  # Maximize plot area
#Plot the graph
plot(g,
layout = layout_with_kk(g, kkconst = vcount(g)**39),  # Adjust repulsion for better spacing
vertex.label = V(g)$name,
vertex.label.cex = 0.6,
vertex.label.color = "black",  # Darker for readability
vertex.size = sqrt(degree(g)) * 2,
vertex.color = ifelse(V(g)$type == "Commodity", "#2E8B57",
ifelse(V(g)$type == "Stock", "#4169E1", "#B22222")),
edge.width = E(g)$weights * E(g)$weights* 40,  # Less aggressive scaling
edge.color = ifelse(E(g)$weights > 0, "#4682B4", "#FF6347"),
main = "Network of Commodities, Industries and Microsoft Stock",
margin = c(0, 0, 0, 0))  # Maximize plot area
#Plot the graph
plot(g,
layout = layout_with_kk(g, kkconst = vcount(g)**39),  # Adjust repulsion for better spacing
vertex.label = V(g)$name,
vertex.label.cex = 0.6,
vertex.label.color = "black",  # Darker for readability
vertex.size = sqrt(degree(g)) * 5,
vertex.color = ifelse(V(g)$type == "Commodity", "#2E8B57",
ifelse(V(g)$type == "Stock", "#4169E1", "#B22222")),
edge.width = E(g)$weights * E(g)$weights* 40,  # Less aggressive scaling
edge.color = ifelse(E(g)$weights > 0, "#4682B4", "#FF6347"),
main = "Network of Commodities, Industries and Microsoft Stock",
margin = c(0, 0, 0, 0))  # Maximize plot area
cor_test_3std = extremities_by_commodity_3std %>%
mutate(data = map2(Commodity, dates, ~ get_data(.x, .y, returns, stock))) %>%
unnest(data) %>%
group_by(Commodity) %>%
summarise(cor_test = list(cor.test(x, y, method = "spearman", conf.level = 0.95, exact = FALSE)),
p_value = map_dbl(cor_test, ~ .x$p.value)
ci_lower = map_dbl(cor_test, ~ .x$conf.int[1]),
cor_test_3std = extremities_by_commodity_3std %>%
mutate(data = map2(Commodity, dates, ~ get_data(.x, .y, returns, stock))) %>%
unnest(data) %>%
group_by(Commodity) %>%
summarise(cor_test = list(cor.test(x, y, method = "spearman", conf.level = 0.95, exact = FALSE)),
p_value = map_dbl(cor_test, ~ .x$p.value),
ci_lower = map_dbl(cor_test, ~ .x$conf.int[1]),
ci_upper = map_dbl(cor_test, ~ .x$conf.int[2])
)
cor_test_3std = extremities_by_commodity_3std %>%
mutate(data = map2(Commodity, dates, ~ get_data(.x, .y, returns, stock))) %>%
unnest(data) %>%
group_by(Commodity) %>%
summarise(cor_test = list(cor.test(x, y, method = "spearman", conf.level = 0.95, exact = FALSE)),
p_value = map_dbl(cor_test, ~ .x$p.value),
ci_lower = map(cor_test, ~ .x$conf.int[1]),
ci_upper = map_dbl(cor_test, ~ .x$conf.int[2])
)
cor_test_3std = extremities_by_commodity_3std %>%
mutate(data = map2(Commodity, dates, ~ get_data(.x, .y, returns, stock))) %>%
unnest(data) %>%
group_by(Commodity) %>%
summarise(cor_test = list(cor.test(x, y, method = "spearman", conf.level = 0.95, exact = FALSE)),
p_value = map_dbl(cor_test, ~ .x$p.value),
ci_lower = map(cor_test, ~ .x$conf.int[1]),
ci_upper = map(cor_test, ~ .x$conf.int[2])
)
cor_test_3std
